jpsType: install
jpsVersion: '1.7.4'
id: magento-cluster-v200
homepage: https://github.com/jelastic-jps/magento-cluster/tree/master
description:
  text: Auto-scalable and highly-available Magento eCommerce cluster with out-of-box
    auto-scaling, even load and traffic distribution, Galera cluster,
    page caching and user session storage on certified Jelastic dockerized stack templates.
  short: Auto-scalable and highly-available Magento cluster with load balancing, data
    replication, content caching and user session storage.
categories:
- apps/clusters
- apps/e-commerce
name: Auto-Scalable Magento Cluster
logo: /images/magento.png

baseUrl: https://raw.githubusercontent.com/sych74/magento-cluster/v2.0.0

onBeforeInstall: /scripts/beforeinstall.js?_r=${fn.random}
onBeforeInit: /scripts/beforeinit.js?_r=${fn.random}
nodes: definedInOnBeforeInstall
skipNodeEmails: true

settings:
  fields:
    - caption: Scaling Strategy
      type: list
      name: loadGrowth
      default: slow
      required: true
      width: 225
      tooltip: | 
        Configure auto-scaling triggers, i.e. how fast the system responds to load spikes by adding or removing nodes.
        <p>Read more about <a href="https://docs.jelastic.com/automatic-horizontal-scaling">Automatic Horizontal Scaling</a></p>
      values:        
        - value: slow
          caption: Low Load
          tooltip: <h2>Low load scaling strategy</h2>add 1 new node when CPU > 70% <p>remove when CPU < 20%</p>
        - value: medium
          caption: Medium Load
          tooltip: <h3>Medium load scaling strategy</h3>add 1 new node when CPU > 50% <p>remove when CPU < 20%</p>
        - value: fast
          caption: High Load
          tooltip: <h3>High load scaling strategy</h3>add 2 new nodes when CPU > 30% <p>remove when CPU < 10%</p>
  
    - caption: Advanced Features
      type: displayfield
      name: displayfield
      markup:
 
    - caption: Install LiteSpeed High-Performance Web Server
      type: checkbox
      name: ls_addon
      value: true
      disabled: false
      tooltip: "If this option is disabled, the cluster will be installed using NGINX load balancer and application servers"
      showIf:
        true:
          - caption: Web Application Firewall
            type: checkbox
            name: waf
            value: true
            disabled: false
            tooltip: "Protect web sites with <a href='https://www.litespeedtech.com/support/wiki/doku.php/litespeed_wiki:waf'>LiteSpeed built-in WAF</a> based on Free ModSecurity Rules from Comodo"

        false:
          - caption: Web Application Firewall
            type: checkbox
            name: waf
            value: false
            disabled: true
            tooltip: "Protect web sites with <a href='https://www.litespeedtech.com/support/wiki/doku.php/litespeed_wiki:waf'>LiteSpeed built-in WAF</a> based on Free ModSecurity Rules from Comodo"
                   
    - caption: Install Let's Encrypt SSL with Auto-Renewal
      type: checkbox
      name: le_addon
      value: true
      disabled: false
      tooltip: "Advanced integration with Let's Encrypt certificate authority that simplifies and automates the process of issuing, configuring and updating trusted custom SSL certificates."

    - caption: Install Lightning-Fast Premium CDN
      type: checkbox
      name: cdn_addon
      value: true
      disabled: false
      tooltip: "Jelastic CDN is an HTTP/3 premium content delivery network of 160+ Super PoPs (points of presence) with bandwidth capacity up to 115 Tbps, advanced caching and acceleration strategies based on best-in-class IP Anycast technology."

    - type: displayfield
      hideLabel: true
      hidden: true
      name: bl_count   
      value: 1
      markup:

mixins:
 - https://raw.githubusercontent.com/jelastic-jps/magento-cluster/master/configs/vers.yaml

onAfterScaleIn[cp]: updateTriggers
  
onAfterScaleOut[nodeGroup:cp]: updateTriggers
       
onAfterStart: 
  cmd[cp]: sudo jem service restart
  
onAfterInstallAddon [nodeGroup:bl, id:cdn]: setupEdgeportCDN
 
onAfterInstallAddon [nodeGroup:bl, id:letsencrypt-ssl-addon]:
  - cmd[bl]: source /opt/letsencrypt/settings && echo $domain
  - setupDomain:
      domain: ${response.out}

onAfterClone: 
  - setupDomain:
      domain: ${event.response.env.domain}
    
onBeforeMigrate:
  - cmd[${nodes.cp.master.id}]: wp option get siteurl --path=${SERVER_WEBROOT} | cut -d'/' -f3;
  - if (/${response.out}/.test(env.domain)):
      cmd[${nodes.cp.master.id}]: echo true > ~/migrate
  - else:
      cmd[${nodes.cp.master.id}]: echo false > ~/migrate

onAfterMigrate:
  - cmd[${nodes.cp.master.id}]: if test -f ~/migrate; then cat ~/migrate; fi
  - if (/${response.out}/.test(true)):
    - setupDomain:
        domain: ${env.domain}

globals:
  PATH: ${baseUrl}
  DB_USER: jelastic-${fn.random}
  DB_PASS: ${fn.password(10)}
  DB_HOST: sqldb
  ES_PASS: ${fn.password(10)}
  PROTOCOL: http
  MG_ADMIN_PASS: ${fn.password(10)}
  LS_ADMIN_PASS: ${fn.password(10)}
  SUCCESS: success
  EMAIL: default
      
onInstall:
  - if ('${settings.le_addon:false}' == 'true'):
      setGlobals:
        PROTOCOL: https

  - script: /scripts/idna.js
  - setGlobals:
      DOMAIN: ${response.domain}         

  - if (${settings.is_trigger:true}):
    - log: Auto Scaling Triggers
    - script: /scripts/addTriggers.js
      nodeGroup: cp
      resourceType: CPU
      loadGrowth: ${settings.loadGrowth}
      cleanOldTriggers: true
      scaleDownLimit: ${nodes.cp.length}

  - mountStorage
   
  - log: Nodes configurations
  - install:
    - jps: https://raw.githubusercontent.com/jelastic/templates/master/config_v2.jps?_r=${fn.random}
      settings:
        targetGroup: bl
        targetNodes: bl
        optimization: magento

    - jps: https://raw.githubusercontent.com/jelastic/templates/master/config_v2.jps?_r=${fn.random}
      settings:
        targetGroup: cp
        targetNodes: cp
        optimization: magento
  
  - cmd[cp, bl]: if test -f /usr/local/sbin/optimization.sh; then bash /usr/local/sbin/optimization.sh &>> /var/log/run.log; fi
  
  - if (/litespeed/.test("${nodes.cp.nodeType}")):
    - cmd[cp, bl]: jem passwd set -p ${globals.LS_ADMIN_PASS}
      user: root
    - cmd[bl]: |-
        jem balancer clear;
        jem balancer rebuildCommon;
      user: root

  - if (/nginxphp/.test("${nodes.cp.nodeType}")):
    - forEach(nodes.cp):
        - cmd[bl]: jem balancer addCommonHost -h ${@i.intIP}
          user: root
        - cmd[bl]: sudo service varnish reload &>> /var/log/run.log
  
  - cmd[elasticsearch]: |-
      echo "discovery.type: single-node" >> /usr/share/elasticsearch/config/elasticsearch.yml;
      echo "xpack.security.enabled: true" >> /usr/share/elasticsearch/config/elasticsearch.yml;
      systemctl stop firewalld;
      systemctl disable firewalld;
  - restartContainers [elasticsearch]
  
  - installMagento
    
  - if (('${settings.le_addon:false}' == 'true') || ('${settings.cdn_addon:false}' == 'true')):
    - script: |
        var actions = [];
        if ('${settings.le_addon:false}' == 'true')
          actions.push({
            jps: "https://github.com/jelastic-jps/lets-encrypt/blob/master/manifest.jps?_r=${fn.random}?_r=${fn.random}",
            nodeGroup: "bl",
            skipEmail: "true",
            settings: {
              customDomains: "${globals.DOMAIN}",
              fallbackToX1: "true"
            }
          });
        if ('${settings.cdn_addon:false}' == 'true')
          actions.push({
            jps: "https://raw.githubusercontent.com/edgeport/cdn/master/manifest.yml?_r=${fn.random}",
            nodeGroup: "bl",
            skipEmail: "true",
            settings: {
              note: "${settings.noteCDN:}"
            }
          });
        return { result: 0, onAfterReturn: { install: actions } };
   
  - if ('${settings.le_addon:false}' == 'true'):
    - cmd[bl]: source /opt/letsencrypt/settings && echo $domain
    - setupDomain:
        domain: ${response.out}
        
  - if ('${settings.cdn_addon:false}' == 'true'): setupEdgeportCDN

addons:
  - id: setup-site-url
    type: update
    name: Magento Base URL
    description: Magento Base URL Configuration.
    logo: ${globals.PATH}/images/magento.png
    settings:
      fields:
        - type: string
          name: magentoURL
          caption: Configuration Base URL for Magento
          default: ''
          required: true
          regex: "^https?:\\/\\/.+$"
          regexText: Incorrect Base URL.

    buttons:
      - caption: Base URL
        settings: main
        action: setup-domain
        loadingText: Applying...
        confirmText: Do you want to change Base URL?
        successText:  Base URL for Magento has been successfully applyed!        

  - id: cache-purge
    type: update
    name: Cache Purge
    description: Cache Purge.
    logo: ${globals.PATH}/images/magento.png
    buttons:
      - caption: Cache Purge
        action: cachePurge
        loadingText: Purging...
        confirmText: Do you want to purge cache?
        successText:  Cache has been successfully purged!                
        
actions:

  setupDomain:
    - cmd[${nodes.cp.master.id}]: bash ~/bin/japp.sh domain ${this.domain}

  cachePurge:
    - cmd[${nodes.cp.master.id}]: bash ~/bin/japp.sh cachePurge
    
  initLEwebroot:
    - cmd[cp, bl]: |-
        [ ! -d /var/lib/jelastic/keys/letsencrypt ] && mkdir -p /var/lib/jelastic/keys/letsencrypt;
        echo "webroot=true" > /var/lib/jelastic/keys/letsencrypt/settings-custom;
        echo "webrootPath=/var/www/webroot/ROOT" >> /var/lib/jelastic/keys/letsencrypt/settings-custom;
      user: root

  setupLEwebroot:
    - if (/litespeed/.test("${nodes.cp.nodeType}")):
      - cmd[bl]: |-
          /usr/bin/xmlstarlet ed --inplace -s "loadBalancerConfig/loadBalancerList/loadBalancer[name = 'webroot']/workerGroupList/workerGroup"  -t elem -n "pingUrl" -v "http://${nodes.cp.master.address}:80/" /var/www/conf/lslbd_config.xml;
          /usr/bin/xmlstarlet ed --inplace -s "loadBalancerConfig/loadBalancerList/loadBalancer[name = 'webroot']/workerGroupList/workerGroup"  -t elem -n "nodeAddresses" -v "${nodes.cp.master.address}" /var/www/conf/lslbd_config.xml;
          sudo jem service restart;
    - if (/nginxphp/.test("${nodes.cp.nodeType}")):
      - forEach(nodes.cp):
  
  setupEdgeportCDN:
    - script: return jelastic.dev.scripting.Eval("c05ffa5b45628a2a0c95467ebca8a0b4", session, "cdn.info", {partnerCode:1})
    - setGlobals:
        CDN: ${env.envName}-${response.response.partnerCode}.cdn.edgeport.net
        SUCCESS: success-cdn
        EMAIL: cdn
    - cmd[${nodes.cp.master.id}]: bash ~/bin/japp.sh edgeportCDN --cdn-url ${globals.CDN}

  installMagento:
    - install: /scripts/install.jps
      settings:
        db_host: ${globals.DB_HOST}
        db_user: ${globals.DB_USER}
        db_pass: ${globals.DB_PASS}
        es_host: elasticsearch
        es_pass: ${globals.ES_PASS}
        mg_admin_pass: ${globals.MG_ADMIN_PASS}
        mg_url: ${globals.PROTOCOL}://${globals.DOMAIN}/
        version: ${globals.version_magento}
        user_email: ${user.email}

  updateTriggers:
    if (!${event.params.auto:true}):
      - log: update scaling trigger
      - script: /scripts/updateTriggers.js
        count: ${nodes.cp.length}

  mountStorage:
    - log: Mount Storage
    - api:
      - method: jelastic.environment.file.AddMountPointByGroup
        params:
          nodeGroup: cp
          sourceNodeId: ${nodes.storage.master.id}
          sourcePath: /data
          path: /var/www/webroot/ROOT
          sourceAddressType: NODE_GROUP
          protocol: NFS4

success:
  email: success/email/${nodes.cp.master.nodeType}/oneregion-${globals.EMAIL}.md?_r=${fn.random}
  text: success/text/oneregion/${globals.SUCCESS}.md?_r=${fn.random}

startPage: ${globals.PROTOCOL}://${env.domain}/
